name: Python Test
description: GitHub Action that tests a python based repository
inputs:
  checkout-repo:
    required: false
    description: Perform checkout as first step of action
    default: "true"
  github-token:
    required: true
    description: GitHub token that can checkout the repository. e.g. 'secrets.GITHUB_TOKEN'
    default: ""
  test-flags:
    required: false
    description: Flags and args for test command
    default: ""
  setup-script:
    required: false
    description: Script to run before tests
    default: ""
  upload-coverage:
    required: false
    description: Upload coverage report to codecov
    default: "false"
  coveralls-repo-token:
    required: false
    description: Coveralls repo token
    default: ""

runs:
  using: composite
  steps:
    - name: Authorize
      uses: open-turo/action-git-auth@v4
      if: inputs.github-token != ''
      with:
        github-token: ${{ inputs.github-token }}
    - name: Checkout
      uses: actions/checkout@v4
      if: inputs.checkout-repo == 'true'
      with:
        fetch-depth: 0
    - name: Setup python
      uses: actions/setup-python@v5

    # Determine which package manager to use
    - name: Determine package manager
      id: pkg-manager
      shell: bash
      run: |
        if [[ -f "poetry.lock" ]]; then
          echo "manager=poetry" >> $GITHUB_OUTPUT
        elif [[ -f "uv.lock" ]]; then
          echo "manager=uv" >> $GITHUB_OUTPUT
        elif [[ -f "requirements.txt" ]] || [[ -f "pyproject.toml" ]]; then
          echo "manager=pip" >> $GITHUB_OUTPUT
        else
          echo "::error::No package manager configuration found (poetry.lock/uv.lock/requirements.txt/pyproject.toml)"
          exit 1
        fi

    # Install package manager
    - name: Install package manager
      shell: bash
      run: |
        case "${{ steps.pkg-manager.outputs.manager }}" in
          "poetry") pip install poetry ;;
          "uv") pip install uv ;;
        esac

    # Install dependencies
    - name: Install dependencies
      shell: bash
      run: |
        case "${{ steps.pkg-manager.outputs.manager }}" in
          "poetry") poetry install ;;
          "uv") uv pip sync ;;
          "pip")
            # For projects with only pyproject.toml, skip requirements.txt check
            if [[ -f "pyproject.toml" ]]; then
              pip install -e ".[test,dev]"
            else
              # Traditional requirements.txt based installation
              if [[ -f requirements-dev.txt ]]; then
                pip install -r requirements-dev.txt
              elif [[ -f requirements-test.txt ]]; then
                pip install -r requirements-test.txt
              elif [[ -f requirements.txt ]]; then
                pip install -r requirements.txt
              else
                echo "::error::No requirements file found"
                exit 1
              fi
            fi
            ;;
        esac

    # Run setup script if provided
    - name: Run setup script
      if: inputs.setup-script != ''
      shell: bash
      run: ${{ inputs.setup-script }}

    # Run tests
    - name: Run tests
      shell: bash
      run: |
        case "${{ steps.pkg-manager.outputs.manager }}" in
          "poetry")
            if poetry show pytest &>/dev/null; then
              poetry run pytest ${{ inputs.test-flags }}
            else
              echo "::error::pytest not found in poetry.lock, cannot run tests"
              exit 1
            fi
            ;;
          "uv"|"pip")
            # Install pytest if not already present
            if ! command -v pytest &>/dev/null; then
              echo "::warning::pytest not found, installing pytest and pytest-cov"
              pip install pytest pytest-cov
            fi
            pytest ${{ inputs.test-flags }}
            ;;
        esac
    - name: Upload coverage
      if: inputs.upload-coverage != 'false'
      uses: coverallsapp/github-action@v2
      env:
        COVERALLS_REPO_TOKEN: ${{ inputs.coveralls-repo-token }}
